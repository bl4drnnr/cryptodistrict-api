generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.1.x", "rhel-openssl-1.0.x", "linux-musl", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
    id               String @id @default(uuid()) @db.Uuid

    firstName            String?    @map("first_name") @db.Citext
    lastName             String?    @map("last_name") @db.Citext
    phoneNumber          String?    @map("phone_number") @unique
    username             String     @unique
    userNumber           String     @map("user_number") @unique
    email                String     @unique
    password             String
    twitter              String?
    linkedIn             String?    @map("linked_in")
    personalWebsite      String?    @map("personal_website")
    title                String?
    bio                  String?

    tac                  Boolean
    publicEmail          Boolean?    @map("public_email") @default(false)
    accountConfirm       Boolean    @map("account_confirm") @default(false)
    emailChanged         Boolean    @map("email_changed") @default(false)
    lastPassChange       DateTime?  @map("last_pass_change")
    twoFaType            TwoFaType? @map("two_fa_type")
    receiveNotifications Boolean    @map("receive_notifications") @default(false)

    verificationCode     VerificationCodes[]
    confirmHashes        ConfirmationHashes[]
    session              Sessions?
    phone                Phones?
    twoFa                TwoFa?

    updatedAt            DateTime @default(now()) @map("updated_at") @updatedAt @db.Timestamptz(6)
    createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    @@map("users")
}

model VerificationCodes {
    id String @id @default(uuid()) @db.Uuid

    verificationCode    String  @map("verification_code")
    user                Users    @relation(fields: [userId], references: [id])
    userId              String  @map("user_id") @db.Uuid
    confirmed           Boolean @default(false)

    updatedAt DateTime @default(now()) @map("updated_at") @updatedAt @db.Timestamptz(6)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    @@map("verificationCodes")
}

model ConfirmationHashes {
    id String @id @default(uuid()) @db.Uuid

    confirmHash         String @map("confirm_hash")
    user                Users   @relation(fields: [userId], references: [id])
    userId              String @map("user_id") @db.Uuid
    confirmed           Boolean @default(false)

    updatedAt DateTime @default(now()) @map("updated_at") @updatedAt @db.Timestamptz(6)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    @@map("confirmationHashes")
}

model Sessions {
    id String @id @default(uuid()) @db.Uuid

    tokenId    String @db.Uuid @map("token_id")
    user       Users   @relation(fields: [userId], references: [id])
    userId     String @map("user_id") @unique @db.Uuid

    updatedAt DateTime @default(now()) @map("updated_at") @updatedAt @db.Timestamptz(6)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    @@map("sessions")
}

model Phones {
    id String @id @default(uuid()) @db.Uuid

    phone      String @unique
    user       Users   @relation(fields: [userId], references: [id])
    userId     String @map("user_id") @unique @db.Uuid

    updatedAt DateTime @default(now()) @map("updated_at") @updatedAt @db.Timestamptz(6)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    @@map("phones")
}

model TwoFa {
    id String @id @default(uuid()) @db.Uuid

    twoFaToken String @map("two_fa_token")
    user       Users   @relation(fields: [userId], references: [id])
    userId     String @map("user_id") @unique @db.Uuid

    updatedAt DateTime @default(now()) @map("updated_at") @updatedAt @db.Timestamptz(6)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    @@map("twofa")
}

enum TwoFaType {
    PHONE
    TOTP
}
